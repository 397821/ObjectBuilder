<?xml version="1.0" encoding="utf-8"?>
<!--
///////////////////////////////////////////////////////////////////////////////////
// 
//  Copyright (c) 2014 Nailson <nailsonnego@gmail.com>
// 
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
// 
//  The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
// 
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//  THE SOFTWARE.
//
///////////////////////////////////////////////////////////////////////////////////
-->

<s:Window xmlns:fx="http://ns.adobe.com/mxml/2009"
          xmlns:s="library://ns.adobe.com/flex/spark"
          xmlns:mx="library://ns.adobe.com/flex/mx"
          xmlns:nail="library://ns.nail.com/naillib"
          width="400"
          height="360"
          resizable="false"
          minimizable="false"
          maximizable="false"
          showStatusBar="false"
          fontSize="11"
          backgroundColor="0x494949"
          title="@Resource(key='openClientFiles', bundle='strings')"
          creationComplete="windowCreationCompleteHandler(event)"
          closing="windowClosingHandler(event)">
    
    <s:layout>
        <s:VerticalLayout gap="10"
                          paddingLeft="10"
                          paddingRight="10"
                          paddingTop="10"
                          paddingBottom="10"
                          horizontalAlign="right"/>
    </s:layout>
    
    <fx:Metadata>
        [ResourceBundle("strings")]
    </fx:Metadata>
    
    <fx:Script>
        <![CDATA[
            import mx.events.FlexEvent;
            
            import spark.events.TextOperationEvent;
            
            import nail.errors.NullArgumentError;
            import nail.logging.Log;
            import nail.otlib.core.Version;
            import nail.otlib.utils.OTFormat;
            
            //--------------------------------------------------------------------------
            //
            // PROPERTIES
            //
            //--------------------------------------------------------------------------
            
            [Bindable]
            private var _loading:Boolean;
            private var _directory:File;
            private var _directoryChanged:Boolean;
            private var _sprFile:File;
            private var _datFile:File;
            private var _version:Version;
            private var _extended:Boolean;
            private var _extendedChanged:Boolean;
            private var _transparency:Boolean;
            private var _transparencyChanged:Boolean;
            private var _cancel:Boolean = true;
            private var _creationComplete:Boolean;
            private var _tmpDirectory:File;
            
            //--------------------------------------
            // Getters / Setters 
            //--------------------------------------
            
            public function get sprFile():File { return _sprFile; }
            public function get datFile():File { return _datFile; }
            public function get version():Version { return _version; }
            
            public function get directory():File { return _directory; }
            public function set directory(value:File):void
            {
                if (!_creationComplete) {
                    _tmpDirectory = value;
                } else if (_directory != value) {
                    _directory = value;
                    _directoryChanged = true;
                    invalidateProperties();
                }
            }
            
            public function get extended():Boolean { return _extended; }
            public function set extended(value:Boolean):void
            {
                if (value != _extended) {
                    _extended = value;
                    _extendedChanged = true;
                    invalidateProperties();
                }
            }
            
            public function get transparency():Boolean { return _transparency; }
            public function set transparency(value:Boolean):void
            {
                if (value != _transparency) { 
                    _transparency = value;
                    _transparencyChanged = true;
                    invalidateProperties();
                }
            }
            
            //--------------------------------------------------------------------------
            //
            // METHODS
            //
            //--------------------------------------------------------------------------
            
            //--------------------------------------
            // Protected
            //--------------------------------------
            
            override protected function commitProperties():void
            {
                super.commitProperties();
                
                if (_directoryChanged) {
                    openFiles(_directory);
                    _directoryChanged = false;
                }
                
                if (_extendedChanged) {
                    enableU32CheckBox.selected = _extended;
                    openFiles(_directory);
                    _extendedChanged = false;
                }
                
                if (_transparencyChanged) {
                    enableAlphaChannelCheckBox.selected = _transparency;
                    _transparencyChanged = false;
                }
            }
            
            //--------------------------------------
            // Private
            //--------------------------------------
            
            private function openFiles(directory:File):void
            {
                _loading = true;
                resetInfo();
                
                if (!directory || !directory.exists) {
                    browseButton.enabled = true;
                    enableU32CheckBox.enabled = false;
                    return;
                }
                
                directoryTextInput.text = directory.nativePath;
                
                var dat:File;
                var spr:File;
                var file:File = directory.resolvePath("Tibia.dat");
                if (file.exists) {
                    dat = file;
                }
                
                file = directory.resolvePath("Tibia.spr");
                if (file.exists) {
                    spr = file;
                }	
                
                // Search renamed spr/dat files on directory.
                if (!spr || !dat) {
                    var list:Array = directory.getDirectoryListing();
                    var length:uint = list.length;
                    for (var i:uint = 0; i < length; i++) {
                        file = list[i];
                        if (!spr && file.extension == OTFormat.SPR) {
                            spr = file;
                        }
                        
                        if (!dat && file.extension == OTFormat.DAT) {
                            dat = file;
                        }
                        
                        if (spr && dat) break;
                    }
                }
                
                if (dat && spr)
                    loadFiles(dat, spr);
                else
                    unsupportedVersionLabel.text = resourceManager.getString("strings", "clientFilesNotFound");
                
                _loading = false;
            }
            
            private function loadFiles(dat:File, spr:File):void
            {
                if (!spr) {
                    throw new NullArgumentError("spr");
                }
                
                if (!dat) {
                    throw new NullArgumentError("dat");
                }
                
                var stream:FileStream;
                var sprSignature:uint;
                var spritesCount:uint;
                var datSignature:uint;
                var itemsCount:uint;
                var outfitsCount:uint;
                var effectsCount:uint;
                var missilesCount:uint;
                var version:Version;
                
                try
                {
                    stream = new FileStream();
                    stream.open(dat, FileMode.READ);
                    stream.endian = Endian.LITTLE_ENDIAN;
                    datSignature = stream.readUnsignedInt();
                    itemsCount = stream.readUnsignedShort();
                    outfitsCount = stream.readUnsignedShort();
                    effectsCount = stream.readUnsignedShort();
                    missilesCount = stream.readUnsignedShort();	
                    stream.close();
                } catch(error:Error) {
                    Log.error(error.message, error.getStackTrace(), error.errorID);
                    this.close();
                    return;
                }
                
                try
                {
                    stream = new FileStream();
                    stream.open(spr, FileMode.READ);
                    stream.endian = Endian.LITTLE_ENDIAN;
                    sprSignature = stream.readUnsignedInt();
                    version = Version.getVersionBySignatures(datSignature, sprSignature);
                    
                    if (!version) {
                        unsupportedVersionLabel.text = resourceManager.getString("strings", "unsupportedVersion");
                        datSignatureLabel.text = datSignature.toString(16).toUpperCase();
                        sprSignatureLabel.text = sprSignature.toString(16).toUpperCase();
                        enableU32CheckBox.enabled = false;
                        return;
                    }
                    
                    if (extended || version.value >= 960) {
                        spritesCount = stream.readUnsignedInt();
                        enableU32CheckBox.selected = true;
                    } else {
                        enableU32CheckBox.enabled = true;
                        spritesCount = stream.readUnsignedShort();
                    }
                    stream.close();
                } catch(error:Error) {
                    Log.error(error.message, error.getStackTrace(), error.errorID);
                    this.close();
                    return;
                }
                
                _datFile = dat;
                _sprFile = spr;
                _version = version;
                
                assetsVersionLabel.text = version.valueStr;
                sprSignatureLabel.text = sprSignature.toString(16).toUpperCase();
                spritesCountLabel.text = spritesCount.toString();
                datSignatureLabel.text = datSignature.toString(16).toUpperCase();
                itemsCountLabel.text = itemsCount.toString();
                outfitsCountLabel.text = outfitsCount.toString();
                effectsCountLabel.text = effectsCount.toString();
                missilesCountLabel.text = missilesCount.toString();
                loadButton.enabled = true;
                enableU32CheckBox.enabled = (_version.value < 960);
            }
            
            private function resetInfo():void
            {
                var empty:String = "";
                assetsVersionLabel.text = empty;
                unsupportedVersionLabel.text = empty;
                sprSignatureLabel.text = empty;
                spritesCountLabel.text = empty;
                datSignatureLabel.text = empty;
                itemsCountLabel.text = empty;
                outfitsCountLabel.text = empty;
                effectsCountLabel.text = empty;
                missilesCountLabel.text = empty;
                loadButton.enabled = false;
                enableU32CheckBox.enabled = false;
                _sprFile = null;
                _datFile = null;
                _version = null;
            }
            
            //--------------------------------------
            // Event Handlers
            //--------------------------------------
            
            protected function windowCreationCompleteHandler(event:FlexEvent):void
            {
                _creationComplete = true;
                
                if (_tmpDirectory) {
                    this.directory = _tmpDirectory;
                    _tmpDirectory = null;
                }
                
                if (directory)
                    focusManager.setFocus(loadButton);
                else
                    focusManager.setFocus(cancelButton);
                
                focusManager.showFocus();
            }
            
            protected function browseButtonClickHandler(event:MouseEvent):void
            {
                var path:String = _directory ? _directory.nativePath : File.documentsDirectory.nativePath;
                var dir:File = new File(path);
                dir.addEventListener(Event.SELECT, fileSelectHandler);
                dir.browseForDirectory(resourceManager.getString("strings", "selectFolder"));
                
                function fileSelectHandler(event:Event):void
                {
                    directory = dir;
                }
            }
            
            protected function directoryTextInputChangeHandler(event:TextOperationEvent):void
            {
                var dir:File;
                
                try
                {
                    dir = new File(directoryTextInput.text);
                } catch(error:Error) {
                    dir = null;
                }
                
                if (dir && dir.exists && dir.isDirectory)
                    this.directory = dir;
                else 
                    resetInfo();
            }
            
            protected function enableU32CheckBoxChangeHandler(event:Event):void
            {
                this.extended = enableU32CheckBox.selected;
            }
            
            protected function enableAlphaChannelCheckBoxChangeHandler(event:Event):void
            {
                this.transparency = enableAlphaChannelCheckBox.selected;
            }
            
            protected function loadButtonClickHandler(event:MouseEvent):void
            {
                _cancel = false;
                this.close();
            }
            
            protected function cancelButtonClickHandler(event:MouseEvent):void
            {
                this.close();
            }
            
            protected function windowClosingHandler(event:Event):void
            {
                if (_cancel) {
                    resetInfo();
                }
            }
            
        ]]>
    </fx:Script>
    
    <s:Group width="100%">
        <s:layout>
            <s:VerticalLayout gap="2"/>
        </s:layout>
        <s:Label text="{resourceManager.getString('strings', 'clientFolder') + ':'}"
                 fontSize="10" 
                 color="0xDFDFDF"/>
        <s:HGroup width="100%"
                  height="100%">
            <s:TextInput id="directoryTextInput"
                         width="100%"
                         change="directoryTextInputChangeHandler(event)"/>
            <s:Button id="browseButton"
                      label="@Resource(key='browse', bundle='strings')"
                      height="21"
                      enabled="{!_loading}"
                      click="browseButtonClickHandler(event)"/>
        </s:HGroup>
    </s:Group>
    
    <!-- Version -->
    <nail:GroupBox width="100%"
                   label="@Resource(key='version', bundle='strings')">
        <nail:layout>
            <s:HorizontalLayout gap="10"
                                verticalAlign="middle"
                                paddingLeft="10" 
                                paddingRight="10"
                                paddingTop="10" 
                                paddingBottom="10"/>
        </nail:layout>
        <s:Label id="assetsVersionLabel"/>
        <s:Label id="unsupportedVersionLabel"
                 color="0xFF0000"/>
        <s:Spacer width="100%"/>
        <s:CheckBox id="enableU32CheckBox"
                    label="@Resource(key='extended', bundle='strings')"
                    enabled="false"
                    change="enableU32CheckBoxChangeHandler(event)"/>
        <s:CheckBox id="enableAlphaChannelCheckBox"
                    label="@Resource(key='transparency', bundle='strings')"
                    change="enableAlphaChannelCheckBoxChangeHandler(event)"/>
    </nail:GroupBox>
    
    <!-- Dat -->
    <nail:GroupBox width="100%" label="DAT">
        <nail:layout>
            <s:TileLayout requestedColumnCount="2"
                          paddingLeft="10"
                          paddingRight="10"
                          paddingTop="10"
                          paddingBottom="10"
                          horizontalGap="10"/>
        </nail:layout>
        <s:Label text="{resourceManager.getString('strings', 'signature') + ':'}"/>
        <s:RichEditableText id="datSignatureLabel"
                            height="12"
                            editable="false"
                            focusEnabled="false"/>
        <s:Label text="{resourceManager.getString('strings', 'items') + ':'}"/>
        <s:Label id="itemsCountLabel"/>
        <s:Label text="{resourceManager.getString('strings', 'outfits') + ':'}"/>
        <s:Label id="outfitsCountLabel"/>
        <s:Label text="{resourceManager.getString('strings', 'effects') + ':'}"/>
        <s:Label id="effectsCountLabel"/>
        <s:Label text="{resourceManager.getString('strings', 'missiles') + ':'}"/>
        <s:Label id="missilesCountLabel"/>
    </nail:GroupBox>	
    
    <!-- Spr -->
    <nail:GroupBox width="100%" label="SPR">
        <nail:layout>
            <s:TileLayout requestedColumnCount="2"
                          paddingLeft="10"
                          paddingRight="10"
                          paddingTop="10"
                          paddingBottom="10"/>
        </nail:layout>
        <s:Label text="{resourceManager.getString('strings', 'signature') + ':'}"/>
        <s:RichEditableText id="sprSignatureLabel"
                            height="12"
                            editable="false"
                            focusEnabled="false"/>
        <s:Label text="{resourceManager.getString('strings', 'sprites') + ':'}"/>
        <s:Label id="spritesCountLabel"/>
    </nail:GroupBox>
    <nail:ShadowLine width="100%"/>
    <s:HGroup width="100%"
              verticalAlign="middle"
              horizontalAlign="right">
        <s:Button id="loadButton"
                  label="@Resource(key='load', bundle='strings')"
                  minWidth="70"
                  enabled="false"
                  click="loadButtonClickHandler(event)"/>
        <s:Button id="cancelButton"
                  label="@Resource(key='cancel', bundle='strings')"
                  minWidth="70"
                  click="cancelButtonClickHandler(event)"/>
    </s:HGroup>
</s:Window>
