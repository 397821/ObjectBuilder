<?xml version="1.0" encoding="utf-8"?>
<!--
///////////////////////////////////////////////////////////////////////////////////
// 
//  Copyright (c) 2014 <nailsonnego@gmail.com>
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
// 
//  The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
// 
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//  THE SOFTWARE.
//
///////////////////////////////////////////////////////////////////////////////////
-->

<s:Window xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:nail="library://ns.nail.com/naillib" 
		  minWidth="500"
		  minHeight="400"
		  backgroundColor="0x494949"
		  showStatusBar="false"
		  title="@Resource(key='lw.title', bundle='controls')"
		  creationComplete="windowCreationCompleteHandler(event)">
	
	<s:layout>
		<s:VerticalLayout gap="0"
						  horizontalAlign="right"/>
	</s:layout>
	
	<fx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			
			import flashx.textLayout.conversion.TextConverter;
			
			import nail.components.NailMain;
			
			//--------------------------------------------------------------------------
			//
			// PROPERTIES
			//
			//--------------------------------------------------------------------------
			
			private var _text : String = "";
			private var _textChanged : Boolean;
			
			//--------------------------------------------------------------------------
			//
			// METHODS
			//
			//--------------------------------------------------------------------------
			
			//--------------------------------------
			// Override Protected
			//--------------------------------------
			
			override protected function commitProperties() : void
			{
				super.commitProperties();
				
				if (_textChanged)
				{
					textArea.textFlow = TextConverter.importToFlow(_text,
						TextConverter.TEXT_FIELD_HTML_FORMAT);
					saveButton.enabled = !isNullOrEmpty(_text);
					_textChanged = false;
				}
			}
			
			//--------------------------------------
			// Private
			//--------------------------------------
			
			private function saveLog(file:File) : void
			{
				var stream : FileStream;
				
				try
				{
					if (file.extension != "txt")
					{
						file.nativePath += ".txt";
					}
					
					stream = new FileStream();
					stream.open(file, FileMode.WRITE);
					stream.writeMultiByte(textArea.text, "iso-8859-1");
					stream.close();
				} 
				catch(error:Error) 
				{
					NailMain.instance.onError(error.message, error.getStackTrace(), error.errorID);
				}
			}
			
			//--------------------------------------
			// Event Handlers
			//--------------------------------------
			
			protected function windowCreationCompleteHandler(event:FlexEvent) : void
			{
				focusManager.setFocus(closeButton);
				focusManager.showFocus();
			}
			
			protected function saveButtonClickHandler(event:MouseEvent) : void
			{
				var file : File;
				
				file = File.documentsDirectory.resolvePath("changes.log");
				file.addEventListener(Event.SELECT, fileSelectHandler);
				file.browseForSave(resourceManager.getString("controls", "lw.save-log"))
				
				function fileSelectHandler(event:Event) : void
				{
					saveLog(file);
				}
			}
			
			//--------------------------------------
			// Getters / Setters 
			//--------------------------------------
			
			[Bindable]
			public function get text() : String
			{
				return _text;
			}
			
			public function set text(value:String) : void
			{
				value = value == null ? "" : value;
				
				if (_text != value)
				{
					_text = value;
					_textChanged = true;
					invalidateProperties();
				}
			}
			
		]]>
	</fx:Script>
	
	<s:TextArea id="textArea"
				width="100%"
				height="100%"
				fontSize="11"
				verticalScrollPolicy="on"
				editable="false"
				focusEnabled="false"
				text="{text}"
				borderColor="0x272727"
				paddingLeft="5"
				paddingRight="10"
				paddingTop="10"
				paddingBottom="10"/>
	
	<s:HGroup width="100%"
			  paddingLeft="10"
			  paddingRight="10"
			  paddingTop="10"
			  paddingBottom="10">
		<s:Button id="saveButton"
				  label="@Resource(key='menu.save', bundle='controls')"
				  width="70"
				  enabled="false"
				  click="saveButtonClickHandler(event)"/>
		<s:Spacer width="100%"/>
		<s:Button id="closeButton"
				  label="@Resource(key='menu.close', bundle='controls')"
				  width="70"
				  click="close()"/>
	</s:HGroup>
</s:Window>
