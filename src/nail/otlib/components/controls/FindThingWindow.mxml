<?xml version="1.0" encoding="utf-8"?>
<!--
///////////////////////////////////////////////////////////////////////////////////
// 
//  Copyright (c) 2014 <nailsonnego@gmail.com>
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
// 
//  The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
// 
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//  THE SOFTWARE.
//
///////////////////////////////////////////////////////////////////////////////////
-->

<s:Window xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:nail="library://ns.nail.com/naillib"
		  xmlns:otlib="library://ns.nail.com/otlib"
		  minWidth="490"
		  maxWidth="490"
		  minHeight="410"
		  backgroundColor="0x494949"
		  maximizable="false"
		  minimizable="false"
		  showStatusBar="false"
		  fontSize="11"
		  title="@Resource(key='ftw.title', bundle='controls')"
		  creationComplete="creationCompleteHandler(event)">
	
	<fx:Metadata>
		[ResourceBundle("controls")]
		[ResourceBundle("otlibControls")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			import mx.events.PropertyChangeEvent;
			
			import nail.components.NailMain;
			import nail.objectbuilder.commands.FindThingCommand;
			import nail.objectbuilder.commands.GetThingCommand;
			import nail.otlib.things.BindableThingType;
			import nail.otlib.things.ThingCategory;
			import nail.otlib.utils.ThingListItem;
			import nail.otlib.utils.ThingProperty;
			
			//--------------------------------------------------------------------------
			//
			// PROPERTIES
			//
			//--------------------------------------------------------------------------
			
			[Bindable]
			private var _collection : ArrayCollection = new ArrayCollection();
			private var _bindableThingType : BindableThingType;
			private var _properties : Dictionary;
			
			//--------------------------------------------------------------------------
			//
			// METHODS
			//
			//--------------------------------------------------------------------------
			
			//--------------------------------------
			// Public
			//--------------------------------------
			
			public function setFindThingResultList(list:Array) : void
			{
				_collection.source = list;
				resultList.selectedIndex = -1;
			}
			
			//--------------------------------------
			// Private
			//--------------------------------------
			
			private function getCurrentCategory() : String
			{
				switch(categoryDropDownList.selectedIndex)
				{
					case 0:
						return ThingCategory.ITEM;
					case 1:
						return ThingCategory.OUTFIT;
					case 2:
						return ThingCategory.EFFECT;
					case 3:
						return ThingCategory.MISSILE;
				}
				return null;
			}
			
			//--------------------------------------
			// Event Handlers
			//--------------------------------------
			
			protected function creationCompleteHandler(event:FlexEvent) : void
			{
				_bindableThingType = new BindableThingType();
				_bindableThingType.addEventListener(PropertyChangeEvent.PROPERTY_CHANGE, thingPropertyChangeHandler);
				_properties = new Dictionary();
			}
			
			protected function findButtonClickHandler(event:MouseEvent) : void
			{
				var list : Vector.<ThingProperty>;
				var thingProperty : ThingProperty;
				var property : String;
				var category : String;
				
				if (_properties == null)
				{
					return;
				}
				
				list = new Vector.<ThingProperty>();
				
				for (property in _properties)
				{
					thingProperty = new ThingProperty();
					thingProperty.property = property;
					thingProperty.value = _properties[property];
					list.push(thingProperty);
				}
				
				category = getCurrentCategory();
				if (list.length > 0 && category != null)
				{
					NailMain.instance.sendCommand(new FindThingCommand(category, list));
				}
			}
			
			protected function selectButtonClickHandler(event:MouseEvent) : void
			{
				var listItem : ThingListItem;
				listItem = resultList.selectedItem as ThingListItem;
				if (listItem != null && listItem.thing != null)
				{
					NailMain.instance.sendCommand(new GetThingCommand(listItem.thing.id, listItem.thing.category));
				}
			}
			
			protected function thingPropertyChangeHandler(event:PropertyChangeEvent) : void
			{
				if (event.newValue)
				{
					_properties[event.property] = event.newValue;
				}
				else 
				{
					delete _properties[event.property];
				}
			}
			
		]]>
	</fx:Script>
	
	<nail:GroupBox label="@Resource(key='label.properties', bundle='controls')"
				   width="230"
				   left="10"
				   top="10"
				   bottom="50">
		<s:Scroller width="100%"
					height="100%"
					verticalScrollPolicy="on">
			<s:VGroup width="100%"
					  height="100%"
					  gap="0"
					  paddingLeft="10"
					  paddingRight="10"
					  paddingTop="10"
					  paddingBottom="10">
				<s:DropDownList id="categoryDropDownList"
								selectedIndex="0"
								width="100%"
								height="20">
					<s:dataProvider>
						<s:ArrayList>
							<fx:String>{resourceManager.getString('controls', 'label.item')}</fx:String>
							<fx:String>{resourceManager.getString('controls', 'label.outfit')}</fx:String>
							<fx:String>{resourceManager.getString('controls', 'label.effect')}</fx:String>
							<fx:String>{resourceManager.getString('controls', 'label.missile')}</fx:String>
						</s:ArrayList>
					</s:dataProvider>
				</s:DropDownList>	
				<s:Spacer height="10"/>
				<s:CheckBox id="isGroundCheckBox"
							label="@Resource(key='tte.ground', bundle='otlibControls')"
							change="{_bindableThingType.isGround = isGroundCheckBox.selected}"/>
				<s:CheckBox id="hasLigthCheckBox"
							label="@Resource(key='tte.has-light', bundle='otlibControls')"
							change="{_bindableThingType.hasLight = hasLigthCheckBox.selected}"/>
				<s:CheckBox id="automapCheckBox"
							label="@Resource(key='tte.automap', bundle='otlibControls')"
							change="{_bindableThingType.miniMap = automapCheckBox.selected}"/>
				<s:CheckBox id="hasOffsetCheckBox"
							label="@Resource(key='tte.has-offset', bundle='otlibControls')"
							change="{_bindableThingType.hasOffset = hasOffsetCheckBox.selected}"/>
				<s:CheckBox id="hasElevationCheckBox"
							label="@Resource(key='tte.has-elevation', bundle='otlibControls')"
							change="{_bindableThingType.hasElevation = hasElevationCheckBox.selected}"/>
				<s:CheckBox id="equipCheckBox"
							label="@Resource(key='tte.equip', bundle='otlibControls')"
							change="{_bindableThingType.cloth = equipCheckBox.selected}"/>
				<s:CheckBox id="marketCheckBox"
							label="@Resource(key='tte.market', bundle='otlibControls')"
							change="{_bindableThingType.isMarketItem = marketCheckBox.selected}"/>
				<s:CheckBox id="writableCheckBox"
							label="@Resource(key='tte.writable', bundle='otlibControls')"
							change="{_bindableThingType.writable = writableCheckBox.selected}"/>
				<s:CheckBox id="writableOnceCheckBox"
							label="@Resource(key='tte.writable-once', bundle='otlibControls')"
							change="{_bindableThingType.writableOnce = writableOnceCheckBox.selected}"/>
				<s:CheckBox id="actionGroupCheckBox"
							label="@Resource(key='tte.action', bundle='otlibControls')"
							change="{_bindableThingType.hasDefaultAction = actionGroupCheckBox.selected}"/>
				<s:CheckBox id="clipCheckBox"
							label="@Resource(key='thing.is-on-clip', bundle='otlibControls')"
							toolTip="@Resource(key='tte.tool-tip-clip', bundle='otlibControls')"
							change="{_bindableThingType.isGroundBorder = clipCheckBox.selected}"/>
				<s:CheckBox id="bottomCheckBox"
							label="@Resource(key='thing.is-on-bottom', bundle='otlibControls')"
							toolTip="@Resource(key='tte.tool-tip-bottom', bundle='otlibControls')"
							change="{_bindableThingType.isOnBottom = bottomCheckBox.selected}"/>
				<s:CheckBox id="topCheckBox"
							label="@Resource(key='thing.is-on-top', bundle='otlibControls')"
							toolTip="@Resource(key='tte.tool-tip-top', bundle='otlibControls')"
							change="{_bindableThingType.isOnTop = topCheckBox.selected}"/>
				<s:CheckBox id="containerCheckBox"
							label="@Resource(key='thing.container', bundle='otlibControls')"
							change="{_bindableThingType.isContainer = containerCheckBox.selected}"/>
				<s:CheckBox id="stackableCheckBox"
							label="@Resource(key='thing.stackable', bundle='otlibControls')"
							change="{_bindableThingType.stackable = stackableCheckBox.selected}"/>
				<s:CheckBox id="forceUseCheckBox"
							label="@Resource(key='thing.force-use', bundle='otlibControls')"
							change="{_bindableThingType.forceUse = forceUseCheckBox.selected}"/>
				<s:CheckBox id="multiUseCheckBox"
							label="@Resource(key='thing.multi-use', bundle='otlibControls')"
							change="{_bindableThingType.multiUse = multiUseCheckBox.selected}"/>
				<s:CheckBox id="liquidContainerCheckBox"
							label="@Resource(key='thing.fluid-container', bundle='otlibControls')"
							change="{_bindableThingType.isFluidContainer = liquidContainerCheckBox.selected}"/>
				<s:CheckBox id="liquidPoolCheckBox"
							label="@Resource(key='thing.fluid', bundle='otlibControls')"
							change="{_bindableThingType.isFluid = liquidPoolCheckBox.selected}"/>
				<s:CheckBox id="unpassableCheckBox" 
							label="@Resource(key='thing.unpassable', bundle='otlibControls')"
							change="{_bindableThingType.isUnpassable = unpassableCheckBox.selected}"/>
				<s:CheckBox id="unmovableCheckBox" 
							label="@Resource(key='thing.unmovable', bundle='otlibControls')"
							change="{_bindableThingType.isUnmoveable = unmovableCheckBox.selected}"/>
				<s:CheckBox id="blockMissileCheckBox"
							label="@Resource(key='thing.block-missile', bundle='otlibControls')"
							change="{_bindableThingType.blockMissile = blockMissileCheckBox.selected}"/>
				<s:CheckBox id="blockPathfindCheckBox"
							label="@Resource(key='thing.block-pathfinder', bundle='otlibControls')"
							change="{_bindableThingType.blockPathfind = blockPathfindCheckBox.selected}"/>
				<s:CheckBox id="noMoveAnimationCheckBox"
							label="@Resource(key='thing.no-move-animation', bundle='otlibControls')"
							change="{_bindableThingType.noMoveAnimation = noMoveAnimationCheckBox.selected}"/>
				<s:CheckBox id="pickupableCheckBox"
							label="@Resource(key='thing.pickupable', bundle='otlibControls')"
							change="{_bindableThingType.pickupable = pickupableCheckBox.selected}"/>
				<s:CheckBox id="hangableCheckBox"
							label="@Resource(key='thing.hangable', bundle='otlibControls')"
							change="{_bindableThingType.hangable = hangableCheckBox.selected}"/>
				<s:CheckBox id="horizontalCheckBox"
							label="@Resource(key='thing.horizontal-wall', bundle='otlibControls')"
							change="{_bindableThingType.isHorizontal = horizontalCheckBox.selected}"/>
				<s:CheckBox id="verticalCheckBox"
							label="@Resource(key='thing.vertical-wall', bundle='otlibControls')"
							change="{_bindableThingType.isVertical = verticalCheckBox.selected}"/>
				<s:CheckBox id="rotatableCheckBox"
							label="@Resource(key='thing.rotatable', bundle='otlibControls')"
							change="{_bindableThingType.rotatable = rotatableCheckBox.selected}"/>
				<s:CheckBox id="dontHideCheckBox"
							label="@Resource(key='thing.dont-hide', bundle='otlibControls')"
							change="{_bindableThingType.dontHide = dontHideCheckBox.selected}"/>
				<s:CheckBox id="translucentCheckBox"
							label="@Resource(key='thing.translucent', bundle='otlibControls')"
							change="{_bindableThingType.isTranslucent = translucentCheckBox.selected}"/>
				<s:CheckBox id="isLyingObjectCheckBox"
							label="@Resource(key='thing.lying-object', bundle='otlibControls')"
							change="{_bindableThingType.isLyingObject = isLyingObjectCheckBox.selected}"/>
				<s:CheckBox id="animateAlwaysCheckBox"
							label="@Resource(key='thing.animate-always', bundle='otlibControls')"
							change="{_bindableThingType.animateAlways = animateAlwaysCheckBox.selected}"/>
				<s:CheckBox id="fullGroundCheckBox"
							label="@Resource(key='thing.full-ground', bundle='otlibControls')"
							change="{_bindableThingType.isFullGround = fullGroundCheckBox.selected}"/>
				<s:CheckBox id="ignoreLookCheckBox"
							label="@Resource(key='thing.ignore-look', bundle='otlibControls')"
							change="{_bindableThingType.ignoreLook = ignoreLookCheckBox.selected}"/>
				<s:CheckBox id="usableCheckBox"
							label="@Resource(key='thing.usable', bundle='otlibControls')"
							change="{_bindableThingType.usable = usableCheckBox.selected}"/>
				<s:CheckBox id="chargesCheckBox"
							label="@Resource(key='thing.has-charges', bundle='otlibControls')"
							change="{_bindableThingType.hasCharges = chargesCheckBox.selected}"/>
				<s:CheckBox id="floorChangeCheckBox"
							label="@Resource(key='thing.floor-change', bundle='otlibControls')"
							change="{_bindableThingType.floorChange = floorChangeCheckBox.selected}"/>
			</s:VGroup>
		</s:Scroller>
	</nail:GroupBox>
	
	<nail:GroupBox label="@Resource(key='label.objects', bundle='controls')"
				   width="230"
				   left="250"
				   top="10"
				   bottom="50">
		<nail:layout>
			<s:VerticalLayout gap="10"
							  paddingLeft="10"
							  paddingRight="10"
							  paddingTop="10"
							  paddingBottom="10"/>
		</nail:layout>
		<s:List id="resultList"
				width="100%"
				height="100%"
				dataProvider="{_collection}"
				itemRenderer="nail.otlib.components.renders.FindResultListRenderer"/>
	</nail:GroupBox>
	
	<nail:ShadowLine left="10"
					 right="10"
					 bottom="40"/>
	
	<s:HGroup width="100%"
			  left="10"
			  bottom="10">
		<s:Button id="findButton"
				  label="@Resource(key='label.find', bundle='controls')"
				  minWidth="70"
				  click="findButtonClickHandler(event)"/>
		<s:Button id="selectButton"
				  label="@Resource(key='label.select', bundle='controls')"
				  minWidth="70"
				  click="selectButtonClickHandler(event)"/>
	</s:HGroup>
</s:Window>
