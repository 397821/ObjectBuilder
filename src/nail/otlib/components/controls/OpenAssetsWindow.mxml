<?xml version="1.0" encoding="utf-8"?>
<!--
///////////////////////////////////////////////////////////////////////////////////
// 
//  Copyright (c) 2014 <nailsonnego@gmail.com>
// 
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
// 
//  The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
// 
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//  THE SOFTWARE.
//
///////////////////////////////////////////////////////////////////////////////////
-->

<s:Window xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx" 
		  xmlns:nail="library://ns.nail.com/naillib"
		  width="400"
		  height="350"
		  resizable="false"
		  minimizable="false"
		  maximizable="false"
		  showStatusBar="false"
		  fontSize="11"
		  backgroundColor="0x494949"
		  title="Open Client Files"
		  closing="windowClosingHandler(event)">
	
	<s:layout>
		<s:VerticalLayout gap="10"
						  paddingLeft="10"
						  paddingRight="10"
						  paddingTop="10"
						  paddingBottom="10"
						  horizontalAlign="right"/>
	</s:layout>
	
	<fx:Script>
		<![CDATA[
			
			import spark.events.TextOperationEvent;
			
			import nail.otlib.assets.AssetsVersion;
			
			//--------------------------------------------------------------------------
			//
			// PROPERTIES
			//
			//--------------------------------------------------------------------------
			
			[Bindable]
			private var _loading : Boolean;
			
			private var _directory : File;
			
			private var _directoryChanged : Boolean;
			
			private var _sprFile : File;
			
			private var _datFile : File;
			
			private var _version : AssetsVersion;
			
			private var _cancel : Boolean = true;
			
			//--------------------------------------------------------------------------
			//
			// METHODS
			//
			//--------------------------------------------------------------------------
			
			//--------------------------------------
			// Protected
			//--------------------------------------
			
			override protected function commitProperties():void
			{
				super.commitProperties();
				
				if (_directoryChanged)
				{
					openFiles(_directory);
					_directoryChanged = false;
				}
			}
			
			//--------------------------------------
			// Private
			//--------------------------------------
			
			private function openFiles(directory:File) : void
			{
				var dat : File;
				var spr : File;
				var file : File;
				var list : Array;
				var length : uint;
				var i : int;
				
				_loading = true;
				resetInfo();
				
				if (directory == null || !directory.exists)
				{
					browseButton.enabled = true;
					return;
				}
				
				directoryTextInput.text = directory.nativePath;
				
				file = directory.resolvePath("Tibia.dat");
				if (file.exists == true)
				{
					dat = file;
				}
				
				file = directory.resolvePath("Tibia.spr");
				if (file.exists == true)
				{
					spr = file;
				}	
				
				// Search renamed spr/dat files on directory.
				if (spr == null || dat == null)
				{
					list = directory.getDirectoryListing();
					length = list.length;
					for (i = 0; i < length; i++)
					{
						file = list[i];
						if (spr == null && file.extension == "spr")
						{
							spr = file;
						}
						
						if (dat == null && file.extension == "dat")
						{
							dat = file;
						}
						
						if (spr != null && dat != null)
						{
							break;
						}
					}
				}
				
				if (dat && spr)
				{
					loadFiles(dat, spr);
				}	
				else 
				{
					unsupportedVersionLabel.text = "Client files not found.";
				}
				
				_loading = false;
			}
			
			private function loadFiles(dat:File, spr:File) : void
			{
				var stream : FileStream;
				var sprSignature : uint;
				var spritesCount : uint;
				var datSignature : uint;
				var itemsCount : uint;
				var outfitsCount : uint;
				var effectsCount : uint;
				var missilesCount : uint;
				var version : AssetsVersion;
				
				if (spr == null)
				{
					throw new ArgumentError("Parameter spr cannot be null.");
				}
				
				if (dat == null)
				{
					throw new ArgumentError("Parameter dat cannot be null.");
				}
				
				try
				{
					stream = new FileStream();
					stream.open(dat, FileMode.READ);
					stream.endian = Endian.LITTLE_ENDIAN;
					datSignature = stream.readUnsignedInt();
					itemsCount = stream.readUnsignedShort();
					outfitsCount = stream.readUnsignedShort();
					effectsCount = stream.readUnsignedShort();
					missilesCount = stream.readUnsignedShort();	
					stream.close();
				} 
				catch(error:Error) 
				{
					trace(error.getStackTrace());
					return;
				}
				
				try
				{
					stream = new FileStream();
					stream.open(spr, FileMode.READ);
					stream.endian = Endian.LITTLE_ENDIAN;
					sprSignature = stream.readUnsignedInt();
					version = AssetsVersion.getVersionBySignatures(sprSignature, datSignature);
					
					if (version == null)
					{
						unsupportedVersionLabel.text = "Unsupported Version.";
						datSignatureLabel.text = datSignature.toString(16).toUpperCase();
						sprSignatureLabel.text = sprSignature.toString(16).toUpperCase();
						return;
					}
					
					if (version.value < 960)
					{
						spritesCount = stream.readUnsignedShort();
					}
					else 
					{
						spritesCount = stream.readUnsignedInt();
					}
					stream.close();
				} 
				catch(error:Error) 
				{
					trace(error.getStackTrace());
					return;
				}
				
				_datFile = dat;
				_sprFile = spr;
				_version = version;
				
				assetsVersionLabel.text = version.value.toString();
				sprSignatureLabel.text = sprSignature.toString(16).toUpperCase();
				spritesCountLabel.text = spritesCount.toString();
				datSignatureLabel.text = datSignature.toString(16).toUpperCase();
				itemsCountLabel.text = itemsCount.toString();
				outfitsCountLabel.text = outfitsCount.toString();
				effectsCountLabel.text = effectsCount.toString();
				missilesCountLabel.text = missilesCount.toString();
				loadButton.enabled = true;
			}
			
			private function resetInfo() : void
			{
				var empty : String = "";
				assetsVersionLabel.text = empty;
				unsupportedVersionLabel.text = empty;
				sprSignatureLabel.text =  empty;
				spritesCountLabel.text =  empty;
				datSignatureLabel.text =  empty;
				itemsCountLabel.text = empty;
				outfitsCountLabel.text = empty;
				effectsCountLabel.text = empty;
				missilesCountLabel.text = empty;
				loadButton.enabled = false;
				_sprFile = null;
				_datFile = null;
				_version = null;
			}
			
			//--------------------------------------
			// Event Handlers
			//--------------------------------------
			
			protected function browseButtonClickHandler(event:MouseEvent) : void
			{
				var path : String;
				var dir : File;
				
				path = _directory != null ? _directory.nativePath : File.documentsDirectory.nativePath;
				dir = new File(path);
				dir.addEventListener(Event.SELECT, fileSelectHandler);
				dir.browseForDirectory("Select client folder");
				
				function fileSelectHandler(event:Event) : void
				{
					directory = dir;
				}
			}
			
			protected function directoryTextInputChangeHandler(event:TextOperationEvent) : void
			{
				var directory : File;
				
				try
				{
					directory = new File(directoryTextInput.text);
				} 
				catch(error:Error) 
				{
					return;
				}
				
				if (directory.exists && directory.isDirectory)
				{
					openFiles(directory);
				}
				else 
				{
					resetInfo();
				}
			}
			
			protected function loadButtonClickHandler(event:MouseEvent) : void
			{
				_cancel = false;
				this.close();
			}

			protected function cancelButtonClickHandler(event:MouseEvent):void
			{			
				this.close();
			}
			
			protected function windowClosingHandler(event:Event) : void
			{
				if (_cancel)
				{
					resetInfo();
				}
			}
			
			//--------------------------------------
			// Getters / Setters 
			//--------------------------------------
			
			public function get sprFile() : File
			{
				return _sprFile;
			}

			public function get datFile() : File
			{
				return _datFile;
			}

			public function get version() : AssetsVersion
			{
				return _version;
			}

			public function get directory() : File
			{
				return _directory;
			}

			public function set directory(value:File) : void
			{
				if (_directory != value)
				{
					_directory = value;
					_directoryChanged = true;
					invalidateProperties();
				}
			}
			
		]]>
	</fx:Script>
	
	<s:Group width="100%">
		<s:Label text="Source Folder:"
				 fontSize="10" 
				 color="0xDFDFDF"/>
		<s:TextInput id="directoryTextInput"
					 left="0"
					 right="65"
					 top="15"
					 change="directoryTextInputChangeHandler(event)"/>
		<s:Button id="browseButton"
				  label="Browse"
				  height="21"
				  top="15"
				  right="0"
				  enabled="{!_loading}"
				  click="browseButtonClickHandler(event)"/>
	</s:Group>
	
	<!-- Version -->
	<nail:GroupBox width="100%" label="Version">
		<nail:layout>
			<s:HorizontalLayout gap="20"
								verticalAlign="middle"
								paddingLeft="10" 
								paddingRight="10"
								paddingTop="10" 
								paddingBottom="10"/>
		</nail:layout>
		<s:Label id="assetsVersionLabel"/>
		<s:Label id="unsupportedVersionLabel"
				 color="0xFF0000"/>
	</nail:GroupBox>
	
	<!-- Dat -->
	<nail:GroupBox width="100%" label="DAT">
		<nail:layout>
			<s:TileLayout requestedColumnCount="2"
						  paddingLeft="10"
						  paddingRight="10"
						  paddingTop="10"
						  paddingBottom="10"/>
		</nail:layout>
		<s:Label text="Signature:"/>
		<s:Label id="datSignatureLabel"/>
		<s:Label text="Items:"/>
		<s:Label id="itemsCountLabel"/>
		<s:Label text="Outfits:"/>
		<s:Label id="outfitsCountLabel"/>
		<s:Label text="Effects:"/>
		<s:Label id="effectsCountLabel"/>
		<s:Label text="Missiles:"/>
		<s:Label id="missilesCountLabel"/>
	</nail:GroupBox>	
	
	<!-- Spr -->
	<nail:GroupBox width="100%" label="SPR">
		<nail:layout>
			<s:TileLayout requestedColumnCount="2"
						  paddingLeft="10"
						  paddingRight="10"
						  paddingTop="10"
						  paddingBottom="10"/>
		</nail:layout>
		<s:Label text="Signature:"/>
		<s:Label id="sprSignatureLabel"/>
		<s:Label text="Sprites:"/>
		<s:Label id="spritesCountLabel"/>
	</nail:GroupBox>
	
	<s:Line width="100%">
		<s:stroke>
			<s:SolidColorStroke color="0x272727"/>
		</s:stroke>
	</s:Line>
	
	<s:HGroup width="100%"
			  verticalAlign="middle"
			  horizontalAlign="right">
		<s:Button id="loadButton"
				  label="Load"
				  width="70"
				  enabled="false"
				  click="loadButtonClickHandler(event)"/>
		<s:Button id="cancelButton"
				  label="Cancel"
				  width="70"
				  click="cancelButtonClickHandler(event)"/>
	</s:HGroup>	
</s:Window>
