<?xml version="1.0" encoding="utf-8"?>
<!--
Copyright (c) 2015 Object Builder <https://github.com/Mignari/ObjectBuilder>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
-->

<s:Window xmlns:fx="http://ns.adobe.com/mxml/2009"
          xmlns:s="library://ns.adobe.com/flex/spark"
          xmlns:mx="library://ns.adobe.com/flex/mx"
          xmlns:nail="library://ns.nail.com/naillib"
          xmlns:otlib="otlib.components.*"
          width="500"
          height="360"
          resizable="false"
          minimizable="false"
          maximizable="false"
          showStatusBar="false"
          fontSize="11"
          type="utility"
          backgroundColor="0x494949"
          title="@Resource(key='openClientFiles', bundle='strings')"
          creationComplete="windowCreationCompleteHandler(event)"
          closing="windowClosingHandler(event)">
    
    <s:layout>
        <s:VerticalLayout gap="10"
                          paddingLeft="10"
                          paddingRight="10"
                          paddingTop="10"
                          paddingBottom="10"
                          horizontalAlign="right"/>
    </s:layout>
    
    <fx:Metadata>
        [ResourceBundle("strings")]
    </fx:Metadata>
    
    <fx:Script>
        <![CDATA[
            import mx.events.FlexEvent;
            
            import nail.utils.DialogDetail;
            import nail.utils.isNullOrEmpty;
            
            import otlib.assets.Assets;
            import otlib.core.Version;
            import otlib.core.VersionStorage;
            import otlib.events.FileTextInputEvent;
            import otlib.utils.ClientInfo;
            import otlib.utils.FilesInfoLoader;
            import otlib.utils.OTFormat;
            
            //--------------------------------------------------------------------------
            // PROPERTIES
            //--------------------------------------------------------------------------
            
            [Bindable]
            private var _loading:Boolean;
            private var _clientDirectory:File;
            private var _clientDirectoryChanged:Boolean;
            private var _sprFile:File;
            private var _datFile:File;
            private var _version:Version;
            private var _extended:Boolean;
            private var _extendedChanged:Boolean;
            private var _transparency:Boolean;
            private var _transparencyChanged:Boolean;
            private var _creationComplete:Boolean;
            private var _tmpDirectory:File;
            private var _detail:uint;
            
            //--------------------------------------
            // Getters / Setters 
            //--------------------------------------
            
            public function get sprFile():File { return _sprFile; }
            public function get datFile():File { return _datFile; }
            public function get version():Version { return _version; }
            
            public function get clientDirectory():File { return _clientDirectory; }
            public function set clientDirectory(value:File):void
            {
                if (!_creationComplete) {
                    _tmpDirectory = value;
                } else if (_clientDirectory != value) {
                    _clientDirectory = value;
                    _clientDirectoryChanged = true;
                    invalidateProperties();
                }
            }
            
            public function get extended():Boolean { return _extended; }
            public function set extended(value:Boolean):void
            {
                if (value != _extended) {
                    _extended = value;
                    _extendedChanged = true;
                    invalidateProperties();
                }
            }
            
            public function get transparency():Boolean { return _transparency; }
            public function set transparency(value:Boolean):void
            {
                if (value != _transparency) { 
                    _transparency = value;
                    _transparencyChanged = true;
                    invalidateProperties();
                }
            }
            
            public function get detail():uint { return _detail; }
            
            //--------------------------------------------------------------------------
            // METHODS
            //--------------------------------------------------------------------------
            
            //--------------------------------------
            // Protected
            //--------------------------------------
            
            override protected function commitProperties():void
            {
                super.commitProperties();
                
                if (_clientDirectoryChanged) {
                    setClientDirectory(_clientDirectory);
                    _clientDirectoryChanged = false;
                }
                
                if (_extendedChanged) {
                    extendedCheckBox.selected = _extended;
                    setClientDirectory(_clientDirectory);
                    _extendedChanged = false;
                }
                
                if (_transparencyChanged) {
                    transparencyCheckBox.selected = _transparency;
                    _transparencyChanged = false;
                }
            }
            
            //--------------------------------------
            // Private
            //--------------------------------------
            
            private function setClientDirectory(directory:File):void
            {
                _loading = true;
                resetInfo();
                
                if (!directory || !directory.exists) {
                    clientBrowseButton.enabled = true;
                    extendedCheckBox.enabled = false;
                    return;
                }
                
                clientDirectoryTextInput.file = directory;
                
                var dat:File;
                var spr:File;
                
                var file:File = directory.resolvePath("Tibia.dat");
                if (file.exists)
                    dat = file;
                
                file = directory.resolvePath("Tibia.spr");
                if (file.exists)
                    spr = file;
                
                // Search renamed spr/dat files on directory.
                if (!spr || !dat) {
                    var list:Array = directory.getDirectoryListing();
                    var length:uint = list.length;
                    for (var i:uint = 0; i < length; i++) {
                        file = list[i];
                        if (!spr && file.extension == OTFormat.SPR)
                            spr = file;
                        
                        if (!dat && file.extension == OTFormat.DAT)
                            dat = file;
                        
                        if (spr && dat)
                            break;
                    }
                }
                
                if (dat && spr)
                    loadFiles(dat, spr);
                else {
                    _loading = false;
                    setErrorText( resourceManager.getString("strings", "clientFilesNotFound") );
                }
            }
            
            private function loadFiles(dat:File, spr:File):void
            {
                var loader:FilesInfoLoader = new FilesInfoLoader();
                loader.addEventListener(Event.COMPLETE, completeHandler);
                loader.addEventListener(ProgressEvent.PROGRESS, progressHandler);
                loader.addEventListener(ErrorEvent.ERROR, errorHandler);
                loader.load(dat, spr, this.extended);
                
                progressBar.visible = true;
                progressBar.includeInLayout = true;
                
                function completeHandler(event:Event):void
                {
                    _loading = false;
                    progressBar.visible = false;
                    progressBar.includeInLayout = false;
                    progressBar.setProgress(0, 1);
                    
                    var info:ClientInfo = loader.filesInfo;
                    clientVersionLabel.text = info.clientVersionStr;
                    datSignatureLabel.text = info.datSignature.toString(16).toUpperCase();
                    itemsCountLabel.text = info.maxItemId.toString();
                    outfitsCountLabel.text = info.maxOutfitId.toString();
                    effectsCountLabel.text = info.maxEffectId.toString();
                    missilesCountLabel.text = info.maxMissileId.toString();
                    sprSignatureLabel.text = info.sprSignature.toString(16).toUpperCase();
                    spritesCountLabel.text = info.maxSpriteId.toString();
                    extendedCheckBox.enabled = (info.clientVersion != 0 && info.clientVersion < 960);
                    enableLoadButton(true);
                    
                    _datFile = dat;
                    _sprFile = spr;
                    _version = VersionStorage.instance.getBySignatures(info.datSignature, info.sprSignature);
                }
                
                function progressHandler(event:ProgressEvent):void
                {
                    progressBar.setProgress(event.bytesLoaded, event.bytesTotal);
                }
                
                function errorHandler(event:ErrorEvent):void
                {
                    _loading = false;
                    _datFile = null;
                    _sprFile = null;
                    _version = null;
                    progressBar.visible = false;
                    progressBar.includeInLayout = false;
                    progressBar.setProgress(0, 1);
                    setErrorText(event.text);
                    enableLoadButton(false);
                }
            }
            
            private function resetInfo():void
            {
                var empty:String = "";
                clientVersionLabel.text = empty;
                sprSignatureLabel.text = empty;
                spritesCountLabel.text = empty;
                datSignatureLabel.text = empty;
                itemsCountLabel.text = empty;
                outfitsCountLabel.text = empty;
                effectsCountLabel.text = empty;
                missilesCountLabel.text = empty;
                loadButton.enabled = false;
                extendedCheckBox.enabled = false;
                _sprFile = null;
                _datFile = null;
                _version = null;
                _loading = false;
                
                setErrorText(null);
                enableLoadButton(false);
            }
            
            private function setErrorText(text:String):void
            {
                var hasError:Boolean = !isNullOrEmpty(text);
                errorIcon.visible = hasError;
                errorIcon.includeInLayout = hasError;
                errorLabel.text = text;
                errorLabel.visible = hasError;
                errorLabel.includeInLayout = hasError;
                
                if (hasError && focusManager.getFocus() === loadButton) {
                    focusManager.setFocus(cancelButton);
                    focusManager.showFocus();
                }
            }
            
            private function enableLoadButton(enabled:Boolean):void
            {
                loadButton.enabled = enabled;
                
                if (enabled) {
                    focusManager.setFocus(loadButton);
                    focusManager.showFocus();
                }
            }
            
            //--------------------------------------
            // Event Handlers
            //--------------------------------------
            
            protected function windowCreationCompleteHandler(event:FlexEvent):void
            {
                _creationComplete = true;
                
                if (_tmpDirectory) {
                    this.clientDirectory = _tmpDirectory;
                    _tmpDirectory = null;
                }
                
                focusManager.setFocus(cancelButton);
                focusManager.showFocus();
            }
            
            protected function clientBrowseButtonClickHandler(event:MouseEvent):void
            {
                var path:String = _clientDirectory ? _clientDirectory.nativePath : File.documentsDirectory.nativePath;
                var dir:File = new File(path);
                dir.addEventListener(Event.SELECT, fileSelectHandler);
                dir.browseForDirectory(resourceManager.getString("strings", "selectFolder"));
                
                function fileSelectHandler(event:Event):void
                {
                    clientDirectory = dir;
                }
            }
            
            protected function clientDirectoryChangeHandler(event:FileTextInputEvent):void
            {
                if (event.file && event.file.exists && event.file.isDirectory)
                    this.clientDirectory = event.file;
                else 
                    resetInfo();
            }
            
            protected function extendedCheckBoxChangeHandler(event:Event):void
            {
                this.extended = extendedCheckBox.selected;
            }
            
            protected function transparencyCheckBoxChangeHandler(event:Event):void
            {
                this.transparency = transparencyCheckBox.selected;
            }
            
            protected function loadButtonClickHandler(event:MouseEvent):void
            {
                _detail = DialogDetail.CONFIRM;
                this.close();
            }
            
            protected function cancelButtonClickHandler(event:MouseEvent):void
            {
                _detail = DialogDetail.CANCEL;
                this.close();
            }
            
            protected function windowClosingHandler(event:Event):void
            {
                if (_detail == DialogDetail.CANCEL)
                    resetInfo();
            }
            
        ]]>
    </fx:Script>
    
    <!-- client files directory -->
    <s:Group width="100%">
        <s:layout>
            <s:VerticalLayout gap="2"/>
        </s:layout>
        <s:Label text="{resourceManager.getString('strings', 'clientFolder') + ':'}"
                 fontSize="11" 
                 color="0xDFDFDF"/>
        <s:HGroup width="100%"
                  height="100%">
            <otlib:FileTextInput id="clientDirectoryTextInput"
                                 width="100%"
                                 fileChange="clientDirectoryChangeHandler(event)"/>
            <s:Button id="clientBrowseButton"
                      label="@Resource(key='browse', bundle='strings')"
                      height="21"
                      enabled="{!_loading}"
                      click="clientBrowseButtonClickHandler(event)"/>
        </s:HGroup>
    </s:Group>
    
    <!-- client version -->
    <nail:GroupBox width="100%"
                   label="@Resource(key='version', bundle='strings')">
        <nail:layout>
            <s:HorizontalLayout gap="10"
                                verticalAlign="middle"
                                paddingLeft="10" 
                                paddingRight="10"
                                paddingTop="10" 
                                paddingBottom="10"/>
        </nail:layout>
        <s:Label id="clientVersionLabel"/>
        <s:Spacer width="100%"/>
        <s:CheckBox id="extendedCheckBox"
                    label="@Resource(key='extended', bundle='strings')"
                    enabled="false"
                    change="extendedCheckBoxChangeHandler(event)"/>
        <s:CheckBox id="transparencyCheckBox"
                    label="@Resource(key='transparency', bundle='strings')"
                    change="transparencyCheckBoxChangeHandler(event)"/>
    </nail:GroupBox>
    
    <!-- dat -->
    <nail:GroupBox width="100%" label="DAT">
        <nail:layout>
            <s:TileLayout requestedColumnCount="2"
                          paddingLeft="10"
                          paddingRight="10"
                          paddingTop="10"
                          paddingBottom="10"
                          horizontalGap="10"/>
        </nail:layout>
        
        <s:Label text="{resourceManager.getString('strings', 'signature') + ':'}"
                 textAlign="right"/>
        <s:RichEditableText id="datSignatureLabel"
                            height="12"
                            editable="false"
                            focusEnabled="false"
                            color="0x9AC9F8"/>
        
        <s:Label text="{resourceManager.getString('strings', 'items') + ':'}"
                 textAlign="right"/>
        <s:Label id="itemsCountLabel"
                 color="0x9AC9F8"/>
        
        <s:Label text="{resourceManager.getString('strings', 'outfits') + ':'}"
                 textAlign="right"/>
        <s:Label id="outfitsCountLabel"
                 color="0x9AC9F8"/>
        
        <s:Label text="{resourceManager.getString('strings', 'effects') + ':'}"
                 textAlign="right"/>
        <s:Label id="effectsCountLabel"
                 color="0x9AC9F8"/>
        
        <s:Label text="{resourceManager.getString('strings', 'missiles') + ':'}"
                 textAlign="right"/>
        <s:Label id="missilesCountLabel"
                 color="0x9AC9F8"/>
    </nail:GroupBox>
    
    <!-- spr -->
    <nail:GroupBox width="100%" label="SPR">
        <nail:layout>
            <s:TileLayout requestedColumnCount="2"
                          paddingLeft="10"
                          paddingRight="10"
                          paddingTop="10"
                          paddingBottom="10"
                          horizontalGap="10"/>
        </nail:layout>
        
        <s:Label text="{resourceManager.getString('strings', 'signature') + ':'}"
                 textAlign="right"/>
        <s:RichEditableText id="sprSignatureLabel"
                            height="12"
                            editable="false"
                            focusEnabled="false"
                            color="0x9AC9F8"/>
        
        <s:Label text="{resourceManager.getString('strings', 'sprites') + ':'}"
                 textAlign="right"/>
        <s:Label id="spritesCountLabel"
                 color="0x9AC9F8"/>
    </nail:GroupBox>
    
    <nail:ShadowLine width="100%"/>
    
    <s:HGroup width="100%"
              height="23"
              verticalAlign="middle"
              horizontalAlign="right"
              gap="10">
        <s:Image id="errorIcon"
                 visible="false"
                 source="{Assets.ERROR}"/>
        <s:Label id="errorLabel"
                 color="0xEC5151"
                 visible="false"
                 includeInLayout="false"/>
        <mx:ProgressBar id="progressBar"
                        mode="manual"
                        label="@Resource(key='loading', bundle='strings')"
                        width="200"
                        height="20"
                        fontWeight="normal"
                        visible="false"
                        includeInLayout="false"
                        labelPlacement="center"/>
        <s:Spacer width="100%"/>
        <s:Button id="loadButton"
                  label="@Resource(key='load', bundle='strings')"
                  minWidth="70"
                  enabled="false"
                  click="loadButtonClickHandler(event)"/>
        <s:Button id="cancelButton"
                  label="@Resource(key='cancel', bundle='strings')"
                  minWidth="70"
                  click="cancelButtonClickHandler(event)"/>
    </s:HGroup>
</s:Window>
